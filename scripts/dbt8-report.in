#!/bin/sh
@SHELLOPTIONS@
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright The DBT-8 Authors
#

usage()
{
	cat << EOF
$(basename "${0}") is the Database Test 8 (DBT-8) report generator

Usage:
  $(basename "${0}") [OPTION] DIRECTORY

Options:
  -V, --version    output version information, then exit
  -?, --help       show this help, then exit

DIRECTORY is the path to DBT-8 results.

@HOMEPAGE@
EOF
}

create_sar_page()
{
	TITLE="${1}"
	TAG="${2}"
	DIR="${3}"
	ODIR="${4}"

	mkdir -p "${ODIR}"

	cat > "${ODIR}/index.rst" << __EOF__
================================================================================
Database Test 8 ${TITLE} ${TAG} Charts
================================================================================

$(show_images "${DIR}" "${TAG}")
__EOF__
}

sar_links() {
	TESTDIR=$1

	THISDIR="${INDIR}/${TESTDIR}"
	if [ ! -f "${THISDIR}/sysstat/sar.datafile" ]; then
		return
	fi

	cat << __EOF__
\`CPU <${TESTDIR}/cpu/>\`__ \`Memory <${TESTDIR}/mem/>\`__ \`Blockdev <${TESTDIR}/blockdev/>\`__ \`Network <${TESTDIR}/net/>\`__ \`Paging <${TESTDIR}/paging/>\`__ \`Swap <${TESTDIR}/swap/>\`__
__EOF__

	create_sar_page "${TESTDIR}" cpu "${THISDIR}" "${THISDIR}/cpu"
	create_sar_page "${TESTDIR}" mem "${THISDIR}" "${THISDIR}/mem"
	create_sar_page "${TESTDIR}" blockdev "${THISDIR}" "${THISDIR}/blockdev"
	create_sar_page "${TESTDIR}" net "${THISDIR}" "${THISDIR}/net"
	create_sar_page "${TESTDIR}" paging "${THISDIR}" "${THISDIR}/paging"
	create_sar_page "${TESTDIR}" swap "${THISDIR}" "${THISDIR}/swap"
}

show_images()
{
	DIR=${1}
	TAG=${2}

	find "${DIR}" -name "sar-${TAG}*.png" | sort -n | while IFS= read -r CHART
	do
		FNAME=$(basename "${CHART}")
		echo ".. image:: ../sysstat/sar/${TAG}/${FNAME}"
		echo "   :target: ../sysstat/sar/${TAG}/${FNAME}"
		echo "   :width: 100%"
		echo ""
	done
}

write_system_stats()
{
	TEST=${1}

	cat << __EOF__
System Statistics
=================

Processor Statistics
--------------------

__EOF__

	find "${OUTDIR}/${TEST}/sysstat/sar" -name "sar-cpu?*.png" | \
			while IFS= read -r PNGFILE; do
		cat <<- __EOF__
			.. image:: ${TEST}/sar/$(basename "${PNGFILE}")
			   :width: 100%

__EOF__
	done

	cat << __EOF__
Block Device Statistics
-----------------------

__EOF__

	find "${OUTDIR}/${TEST}/sysstat/sar" -name "sar-blockdev-*-*.png" | \
			while IFS= read -r PNGFILE; do
		cat <<- __EOF__
			.. image:: ${TEST}/sar/$(basename "${PNGFILE}")
			   :width: 100%

__EOF__
	done
}

# Custom argument handling for hopefully most portability.
while [ "${#}" -gt 0 ] ; do
	case "${1}" in
	(-V | --version)
		echo "$(basename "${0}") (Database Test 8) v@PROJECT_VERSION@"
		;;
	(-\? | --help)
		usage
		exit 0
		;;
	(--* | -*)
		echo "$(basename "${0}"): invalid option -- '${1}'"
		echo "try \"$(basename "${0}") --help\" for more information."
		exit 1
		;;
	(*)
		break
		;;
	esac
	shift
done

if [ "${#}" -eq 0 ]; then
	printf "Specify dbt8 results directory, try \"%s -?\" " \
			"$(basename "${0}")" 1>&2
	echo "for more information." 1>&2
	exit 1
fi

INDIR="${1}"
OUTDIR="${INDIR}"

REPORT="${OUTDIR}/report.rst"
REPORTLOAD="${OUTDIR}/report-load.rst"
REPORTPOWER="${OUTDIR}/report-power.rst"

DIRLOAD="${INDIR}/load"
DIRPOWER="${INDIR}/power"

CONFIGFILE="${INDIR}/config.txt"
CPU_MODEL=$(grep "^model" "${CONFIGFILE}" | cut -d ":" -f2-)
CPUS=$(grep ^cpus "${CONFIGFILE}" | cut -d ":" -f2-)
DBMS=$(grep "^dbms" "${CONFIGFILE}" | awk '{print $2}')
KERNEL=$(grep ^kernel "${CONFIGFILE}" | cut -d ":" -f2-)
OS=$(grep ^distribution "${CONFIGFILE}" | cut -d ":" -f2-)
RAM=$(grep ^memory "${CONFIGFILE}" | cut -d ":" -f2-)
SCALE=$(grep ^scale "${CONFIGFILE}" | cut -d ":" -f2-)

dbt8-plot-results -i "${INDIR}/power/time_statistics.csv" -o "${OUTDIR}" \
		2> /dev/null

SUMMARY="${INDIR}/summary.rst"
if [ ! -f "$SUMMARY" ]; then
	dbt8-post-process -i "${INDIR}" -o "${INDIR}"
fi

README="${DIRPOWER}/dbstat/readme-${DBMS}.txt"
if [ -f "$README" ]; then
	DBVER=$(head -n 1 "${README}")
fi

cat << __EOF__ > "${REPORT}"
$(cat "${SUMMARY}")

System Configuration
====================

Hardware Information
--------------------

* CPU Type: $CPU_MODEL
* Total Processors: $CPUS
* Memory: $RAM KB RAM

Software Information
--------------------

* Operating System: $OS $KERNEL
* Database Server: $DBVER

Power Test
==========

.. image:: power.png
   :alt: Missing Power Test Query Times
   :width: 100%

Query Execution Plans
---------------------

=====  =====
Query  Plan
=====  =====
__EOF__

for Q in $(find "${INDIR}/power" -maxdepth 1 -type f -name "*.out" \
		-exec basename {} \; | sort -V); do
	BASE="${Q%.*}"
	printf "%5s  \`View <power/%s>\`__\n" "${BASE}" "${Q}" >> "${REPORT}"
done

cat << __EOF__ >> "${REPORT}"
=====  =====

System Statistics
=================

Load Test
---------

* Charts: $(sar_links load)

Power Test
----------

* Charts: $(sar_links power)

$(eval "dbt8-${DBMS}-report -i ${INDIR}" 2> /dev/null)
__EOF__

#
# Generate Load Test Report
#

cat << __EOF__ > "${REPORTLOAD}"
=========================
Database Test 8 Load Test
=========================

================  ===================  ===================  ===============
Phase             Start Timestamp      End Timestamp        Elapsed Time
================  ===================  ===================  ===============
__EOF__

grep -v "^stream" "${DIRLOAD}/time_statistics.csv" | while IFS= read -r LINE
do
	printf "%16s  %s  %s  %s\n" \
			"$(echo "${LINE}" | cut -d "," -f 3)" \
			"$(echo "${LINE}" | cut -d "," -f 4)" \
			"$(echo "${LINE}" | cut -d "," -f 5)" \
			"$(echo "${LINE}" | cut -d "," -f 6)" \
			>> "${REPORTLOAD}"
done

cat << __EOF__ >> "${REPORTLOAD}"
================  ===================  ===================  ===============

$(write_system_stats load)
__EOF__

#
# Generate Power Test Report
#

cat << __EOF__ > "${REPORTPOWER}"
==========================
Database Test 8 Power Test
==========================

$(write_system_stats power)
__EOF__

#
# Convert reStructuredText files to HTML and PDF.
#

RST2HTML5=""
for POSSIBILITY in rst2html5.py rst2html5; do
	if command -v ${POSSIBILITY} > /dev/null 2>&1; then
		RST2HTML5="${POSSIBILITY}"
		break
	fi
done

RST2PDF="$(command -v rst2pdf)"

find "${OUTDIR}" -name "*.rst" 2> /dev/null | while IFS= read -r RST; do
	RSTDIR=$(dirname "${RST}")
	RSTNAME=$(basename "${RST}")
	NAME="${RSTNAME%.*}"
	if [ ! "${RST2HTML5}" = "" ]; then
		eval "${RST2HTML5} ${RST} ${RSTDIR}/${NAME}.html" 2> /dev/null
	fi
	if [ ! "${RST2PDF}" = "" ]; then
		eval "${RST2PDF} -o ${RSTDIR}/${NAME}.pdf ${RST}" 2> /dev/null
	fi
done

echo ""
echo "Generated top level HTML reports (requires rst2html5):"
find "${OUTDIR}" -maxdepth 1 -name '*.html' 2> /dev/null
echo ""

echo "Generated PDF reports (requires rst2pdf):"
find "${OUTDIR}" -name '*.pdf' 2> /dev/null
echo ""
